# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: publish nuget

on: 
  workflow_dispatch:
    inputs:
      project:
        description: 'Project name'
        required: true
        default: 'Cs.Logging'
      version:
        description: 'Version'
        required: true
        default: '0.0.1'
    
env:
  BUILD_CONFIGURATION: Release
  ARTIFACT_PATH: ./Artifacts
  PACKAGE_VERSION: ${{ github.event.inputs.version }}
  PROJECT_NAME: ${{ github.event.inputs.project }}

jobs:
  build:
    strategy:
      fail-fast: true

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive' # submodule 받아오지 않으면 stylecop이 제대로 동작하지 않는다.

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build -c ${{env.BUILD_CONFIGURATION}} --no-restore

    - name: Test
      run: dotnet test -c ${{env.BUILD_CONFIGURATION}} --no-build --verbosity normal

    - name: pack
      #run: dotnet pack -p:projectid=${{env.PROJECT_NAME}} -p:PackageVersion=${{env.PACKAGE_VERSION}} -c ${{env.BUILD_CONFIGURATION}} --no-build --no-restore
      # ^ gpt가 알려준 명령인데, 종속이 걸린 프로젝트의 package까지 같이 만들어준다.
      run: dotnet pack ./Engine/${{env.PROJECT_NAME}}/${{env.PROJECT_NAME}}.csproj -p:PackageVersion=${{env.PACKAGE_VERSION}} -c ${{env.BUILD_CONFIGURATION}} --no-build --no-restore
        
    - name: gather artifacts
      run: |
        mkdir ${{env.ARTIFACT_PATH}}
        cp -r ./Engine/${{env.PROJECT_NAME}}/bin/Release/*.nupkg ${{env.ARTIFACT_PATH}}
      shell: bash
        
    - name: upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget
        path: ${{env.ARTIFACT_PATH}}
        
  push-to-nuget:
    needs: build
    runs-on: ubuntu-latest

    steps:

    - name: download artifact
      uses: actions/download-artifact@v4
      with:
        name: nuget
        path: ${{env.ARTIFACT_PATH}}

    - name: push
      run: dotnet nuget push ${{env.ARTIFACT_PATH}}/**/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
        

  push-to-github-package:
    needs: build
    runs-on: ubuntu-latest

    steps:

    - name: download artifact
      uses: actions/download-artifact@v4
      with:
        name: nuget
        path: ${{env.ARTIFACT_PATH}}

    - name: push
      # 지금은 개인키를 secret에 등록해 사용. 다른 방법이 있는가?
      run : dotnet nuget push ${{env.ARTIFACT_PATH}}/**/*.nupkg --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ secrets.PRIVATE_ACCESS_TOKEN }}
